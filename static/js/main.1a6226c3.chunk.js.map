{"version":3,"sources":["components/TodoList/TodoList.jsx","api/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","todos","selectUser","selectedUser","className","map","todo","completed","key","id","type","readOnly","title","userId","onClick","BASE_URL","request","url","options","fetch","then","response","json","CurrentUser","state","user","this","props","data","setState","prevProps","name","email","phone","clearUser","React","Component","App","selectedUserId","inputSearchValue","todosStatus","filterTodosByTitle","value","setTodosStatus","status","prepareTodos","visibleTodos","filter","trim","toLowerCase","includes","onChange","target","event","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1a6226c3.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\n\nexport const TodoList = ({ todos, selectUser, selectedUser }) => (\n  <div className=\"TodoList\">\n    <div className=\"TodoList__list-container\">\n      <ul className=\"TodoList__list\">\n        {todos.map(todo => (\n          <li\n            className={\n              todo.completed\n                ? 'TodoList__item TodoList__item--checked'\n                : 'TodoList__item TodoList__item--unchecked'\n            }\n            key={todo.id}\n          >\n            <label>\n              <input type=\"checkbox\" readOnly />\n              <p>{todo.title}</p>\n            </label>\n\n            <button\n              className={\n                todo.userId === selectedUser\n                  ? `\n                      TodoList__user-button\n                      TodoList__user-button--selected\n                      button\n                    `\n                  : 'TodoList__user-button button'\n              }\n              type=\"button\"\n              onClick={() => {\n                selectUser(todo.userId);\n              }}\n            >\n              User&nbsp;#{todo.userId}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n);\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport function request(url, options) {\n  return fetch(\n    !options ? `${BASE_URL}${url}` : `${BASE_URL}${url}${options}`,\n  )\n    .then(response => response.json());\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './CurrentUser.scss';\nimport { request } from '../../api/api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: {},\n  }\n\n  componentDidMount() {\n    request('/users', `/${this.props.userId}`)\n      .then(({ data }) => this.setState({ user: { ...data } }));\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.userId !== prevProps.userId) {\n      request('/users', `/${this.props.userId}`)\n        .then(({ data }) => this.setState({ user: { ...data } }));\n    }\n  }\n\n  render() {\n    const { id, name, email, phone } = this.state.user;\n    const { clearUser } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user: {id}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{name}</h3>\n        <p className=\"CurrentUser__email\">{email}</p>\n        <p className=\"CurrentUser__phone\">{phone}</p>\n        <button\n          className=\"CurrentUser__clear\"\n          type=\"button\"\n          onClick={clearUser}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clearUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { request } from \"./api/api\";\n\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n    inputSearchValue: '',\n    todosStatus: 'All',\n  };\n\n  componentDidMount() {\n    request('/todos')\n      .then(({ data }) =>\n        this.setState({ todos: [...data] })\n      );\n  }\n\n  selectUser = (userId) => {\n    if(this.state.selectedUserId !== userId) {\n      this.setState({\n        selectedUserId: userId,\n      })}\n  }\n\n  filterTodosByTitle = ({ name, value }) => {\n    this.setState({ [name]: value });\n  }\n\n  setTodosStatus = (status) => {\n    this.setState({ todosStatus: status });\n  }\n\n  prepareTodos = () => {\n    const { todos, inputSearchValue, todosStatus } = this.state;\n\n    let visibleTodos = [...todos];\n\n    if (todosStatus === 'active') {\n      visibleTodos = [...todos].filter(({ completed }) => !completed);\n    }\n\n    if (todosStatus === 'completed') {\n      visibleTodos = [...todos].filter(({ completed }) => completed);\n    }\n\n    if (inputSearchValue.trim()) {\n      visibleTodos = [...visibleTodos].filter(todo => (\n        (`${todo.title}`).toLowerCase().includes(inputSearchValue.toLowerCase())\n      ));\n    }\n\n    return visibleTodos;\n  }\n\n  clearUser = () => {\n    this.setState({\n      selectedUserId: 0,\n    })\n  }\n\n  render() {\n    const { inputSearchValue, selectedUserId } = this.state;\n    const visibleTodos = this.prepareTodos();\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <h2>Todos:</h2>\n          <input\n            type=\"text\"\n            id=\"title-filter\"\n            name=\"inputSearchValue\"\n            value={inputSearchValue}\n            onChange={({ target }) => this.filterTodosByTitle(target)}\n          />\n          <select\n            onChange={event => this.setTodosStatus(event.target.value)}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n\n          <TodoList\n            todos={visibleTodos}\n            selectUser={this.selectUser}\n            selectedUser={selectedUserId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearUser={this.clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}